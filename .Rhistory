} else {
first_year <- sort(years)[1]
cat("\nUsing the land use map for the year ",
first_year,
"as reference map")
filename_ind_ref_lu_map <- grep(as.character(first_year),
filenames_cropped_lu_maps)
}
filename_ref_cropped_lu_map <-
filenames_cropped_lu_maps[filename_ind_ref_lu_map]
ref_cropped_lu_map <- terra::rast(filename_ref_cropped_lu_map)
if(terra::nlyr(ref_cropped_lu_map)>1){
ref_cropped_lu_map <- terra::app(ref_cropped_lu_map, fun = sum,
na.rm = T)
}
inds_NA_vals <- which(is.na(terra::values(ref_cropped_lu_map)))
if(length(inds_NA_vals)>0){
lu_frac_matrix = lu_frac_matrix[-inds_NA_vals,]
}
rowsums2 <- rowSums(lu_frac_matrix, na.rm = T)
lu_frac_matrix <- lu_frac_matrix %>%
as.data.frame() %>%
mutate_all(list(~./rowsums2)) %>%
as.matrix()
}
year <- as.numeric(sub(".tif", "", sub('.*_', '', names(input_map))))
colnames(lu_frac_matrix) <- paste0(year, "_", names(input_maps_frac))
return(lu_frac_matrix)
}
lu_frac_matrices_list <- lapply(X = lu_frac_grids_list,
FUN = convert_map_into_fractional_lu_matrix)
lu_classes <- identify_lu_classes(lu_frac_matrices_list = lu_frac_matrices_list)
lu_classes
names(lu_frac_matrices_list) <- sort(years)
add_missing_lu_classes <- function(year){
lu_matrix <- lu_frac_matrices_list[[as.character(year)]]
unique_lu_classes_year <- unique(sub('.*_', '', colnames(lu_matrix)))
missing_lu_classes_indices <- which(!lu_classes %in% unique_lu_classes_year)
year_char <- as.character(year)
order_col_names <- paste0(year_char, "_", lu_classes)
if(length(missing_lu_classes_indices)>0){
missing_lu_classes <- lu_classes[missing_lu_classes_indices]
new_col_names <- paste0(year_char, "_", missing_lu_classes)
for(new_col_name in new_col_names){
cat("In year", year, "the following land use classes were missing:",
new_col_name, "\nAn empty column has been added\n")
warning("In year ", year, " the following land use classes were missing: ",
new_col_name, "\nAn empty column has been added\n")
lu_matrix <- lu_matrix %>%
as.data.frame() %>%
mutate(!!new_col_name := 0)
}
}
if(class(lu_matrix)[1]=="matrix"){
lu_matrix <- lu_matrix %>%
as.data.frame()
}
lu_matrix[is.na(lu_matrix)] <- 0
lu_matrix <- lu_matrix %>%
dplyr::select(all_of(order_col_names)) %>%
as.matrix()
return(lu_matrix)
}
lu_frac_matrices_list2 <- lapply(X = sort(years),
FUN = add_missing_lu_classes)
year = 1998
lu_matrix <- lu_frac_matrices_list[[as.character(year)]]
dim(lu_matrix)
unique_lu_classes_year <- unique(sub('.*_', '', colnames(lu_matrix)))
unique_lu_classes_year
missing_lu_classes_indices <- which(!lu_classes %in% unique_lu_classes_year)
missing_lu_classes_indices
lu_classes
unique_lu_classes_year
lu_classes
lu_classes
missing_lu_classes_indices <- which(!lu_classes %in% unique_lu_classes_year)
missing_lu_classes_indices
year_char <- as.character(year)
year_char
order_col_names
order_col_names <- paste0(year_char, "_", lu_classes)
order_col_names
if(length(missing_lu_classes_indices)>0){
missing_lu_classes <- lu_classes[missing_lu_classes_indices]
new_col_names <- paste0(year_char, "_", missing_lu_classes)
for(new_col_name in new_col_names){
cat("In year", year, "the following land use classes were missing:",
new_col_name, "\nAn empty column has been added\n")
warning("In year ", year, " the following land use classes were missing: ",
new_col_name, "\nAn empty column has been added\n")
lu_matrix <- lu_matrix %>%
as.data.frame() %>%
mutate(!!new_col_name := 0)
}
}
if(class(lu_matrix)[1]=="matrix"){
lu_matrix <- lu_matrix %>%
as.data.frame()
}
lu_matrix[is.na(lu_matrix)] <- 0
lu_matrix <- lu_matrix %>%
dplyr::select(all_of(order_col_names)) %>%
as.matrix()
order_col_names
order_col_names
colnames(lu_matrix)
year
lu_matrix <- lu_frac_matrices_list[[as.character(year)]]
unique_lu_classes_year <- unique(sub('.*_', '', colnames(lu_matrix)))
colnames(lu_matrix)
year
names(lu_frac_matrices_list)
colnames(lu_frac_matrices_list[[1]])
colnames(lu_frac_matrices_list[[7]])
colnames(lu_frac_matrices_list[[9]])
names(input_map)
colnames(lu_frac_grids_list[[1]])
names(lu_frac_grids_list[[1]])
names(input_map)
year <- as.numeric(sub(".tif", "", sub('.*_', '', names(input_map))))
year
year <- as.numeric(sub(".tif", "", sub('.*_', '', names(input_map))))
colnames(lu_frac_matrix)
names(input_map)
names(lu_frac_grids_list)
lu_frac_grids_list
names(input_map)
names(input_map_frac)
year <- as.numeric(sub(".tif", "", sub('.*_', '', names(input_map_frac))))
lu_frac_grids_list
names(lu_frac_grids_list)
lu_frac_grids_list
names(lu_frac_grids_list)
names(lu_frac_grids_list) <- sort(years)
names(lu_frac_grids_list)
convert_map_into_fractional_lu_matrix <- function(years){
lu_frac_matrix <- matrix(data = terra::values(input_maps_frac),
ncol = length(names(input_maps_frac)))
lu_frac_matrix[is.na(lu_frac_matrix)] <- 0
if(no_unfilled_cells == T){
cat("\nRecaling all cells to ensure the fractions sum up to 1\n")
specify_output_dir(dir_output_files = dir_output_files,
aoi = country,
aggregation_factor = aggregation_factor)
filenames_cropped_lu_maps = intersect(list.files(pattern = "cropped_lu_map"),
list.files(pattern = ".tif$"))
if(!is.null(cut_off_year)){
cat("\nUsing the land use map for the year",
cut_off_year,
"as reference map\n")
filename_ind_ref_lu_map <- grep(as.character(cut_off_year),
filenames_cropped_lu_maps)
} else {
first_year <- sort(years)[1]
cat("\nUsing the land use map for the year ",
first_year,
"as reference map")
filename_ind_ref_lu_map <- grep(as.character(first_year),
filenames_cropped_lu_maps)
}
filename_ref_cropped_lu_map <-
filenames_cropped_lu_maps[filename_ind_ref_lu_map]
ref_cropped_lu_map <- terra::rast(filename_ref_cropped_lu_map)
if(terra::nlyr(ref_cropped_lu_map)>1){
ref_cropped_lu_map <- terra::app(ref_cropped_lu_map, fun = sum,
na.rm = T)
}
inds_NA_vals <- which(is.na(terra::values(ref_cropped_lu_map)))
if(length(inds_NA_vals)>0){
lu_frac_matrix = lu_frac_matrix[-inds_NA_vals,]
}
rowsums2 <- rowSums(lu_frac_matrix, na.rm = T)
lu_frac_matrix <- lu_frac_matrix %>%
as.data.frame() %>%
mutate_all(list(~./rowsums2)) %>%
as.matrix()
}
year <- as.numeric(sub(".tif", "", sub('.*_', '', names(input_map_frac))))
colnames(lu_frac_matrix) <- paste0(year, "_", names(input_maps_frac))
return(lu_frac_matrix)
}
years
sort(years)
as.character(sort(years))
convert_map_into_fractional_lu_matrix
input_map_frac <- lu_frac_grids_list[[year]]
year = years[1]
input_map_frac <- lu_frac_grids_list[[year]]
year = as.character(years[1])
year
input_map_frac <- lu_frac_grids_list[[year]]
input_map_frac
lu_frac_matrix <- matrix(data = terra::values(input_map_frac),
ncol = length(names(input_map_frac)))
convert_map_into_fractional_lu_matrix <- function(years){
input_map_frac <- lu_frac_grids_list[[year]]
lu_frac_matrix <- matrix(data = terra::values(input_map_frac),
ncol = length(names(input_map_frac)))
lu_frac_matrix[is.na(lu_frac_matrix)] <- 0
if(no_unfilled_cells == T){
cat("\nRecaling all cells to ensure the fractions sum up to 1\n")
specify_output_dir(dir_output_files = dir_output_files,
aoi = country,
aggregation_factor = aggregation_factor)
filenames_cropped_lu_maps = intersect(list.files(pattern = "cropped_lu_map"),
list.files(pattern = ".tif$"))
if(!is.null(cut_off_year)){
cat("\nUsing the land use map for the year",
cut_off_year,
"as reference map\n")
filename_ind_ref_lu_map <- grep(as.character(cut_off_year),
filenames_cropped_lu_maps)
} else {
first_year <- sort(years)[1]
cat("\nUsing the land use map for the year ",
first_year,
"as reference map")
filename_ind_ref_lu_map <- grep(as.character(first_year),
filenames_cropped_lu_maps)
}
filename_ref_cropped_lu_map <-
filenames_cropped_lu_maps[filename_ind_ref_lu_map]
ref_cropped_lu_map <- terra::rast(filename_ref_cropped_lu_map)
if(terra::nlyr(ref_cropped_lu_map)>1){
ref_cropped_lu_map <- terra::app(ref_cropped_lu_map, fun = sum,
na.rm = T)
}
inds_NA_vals <- which(is.na(terra::values(ref_cropped_lu_map)))
if(length(inds_NA_vals)>0){
lu_frac_matrix = lu_frac_matrix[-inds_NA_vals,]
}
rowsums2 <- rowSums(lu_frac_matrix, na.rm = T)
lu_frac_matrix <- lu_frac_matrix %>%
as.data.frame() %>%
mutate_all(list(~./rowsums2)) %>%
as.matrix()
}
colnames(lu_frac_matrix) <- paste0(year, "_", names(input_maps_frac))
return(lu_frac_matrix)
}
lu_frac_matrices_list <- lapply(X = as.character(sort(years)),
FUN = convert_map_into_fractional_lu_matrix)
names(lu_frac_matrices_list)
lu_classes <- identify_lu_classes(lu_frac_matrices_list = lu_frac_matrices_list)
names(lu_frac_matrices_list) <- sort(years)
year
lu_matrix <- lu_frac_matrices_list[[as.character(year)]]
dim(lu_matrix)
colnames(lu_matrix)
unique_lu_classes_year <- unique(sub('.*_', '', colnames(lu_matrix)))
unique_lu_classes_year
missing_lu_classes_indices <- which(!lu_classes %in% unique_lu_classes_year)
missing_lu_classes_indices
year_char <- as.character(year)
add_missing_lu_classes <- function(year){
lu_matrix <- lu_frac_matrices_list[[as.character(year)]]
unique_lu_classes_year <- unique(sub('.*_', '', colnames(lu_matrix)))
missing_lu_classes_indices <- which(!lu_classes %in% unique_lu_classes_year)
year_char <- as.character(year)
order_col_names <- paste0(year_char, "_", lu_classes)
if(length(missing_lu_classes_indices)>0){
missing_lu_classes <- lu_classes[missing_lu_classes_indices]
new_col_names <- paste0(year_char, "_", missing_lu_classes)
for(new_col_name in new_col_names){
cat("In year", year, "the following land use classes were missing:",
new_col_name, "\nAn empty column has been added\n")
warning("In year ", year, " the following land use classes were missing: ",
new_col_name, "\nAn empty column has been added\n")
lu_matrix <- lu_matrix %>%
as.data.frame() %>%
mutate(!!new_col_name := 0)
}
}
if(class(lu_matrix)[1]=="matrix"){
lu_matrix <- lu_matrix %>%
as.data.frame()
}
lu_matrix[is.na(lu_matrix)] <- 0
lu_matrix <- lu_matrix %>%
dplyr::select(all_of(order_col_names)) %>%
as.matrix()
return(lu_matrix)
}
lu_frac_matrices_list2 <- lapply(X = sort(years),
FUN = add_missing_lu_classes)
years
year = as.character(sort(years)[1])
year
lu_matrix <- lu_frac_matrices_list[[as.character(year)]]
dim(lu_matrix)
lu_matrix <- lu_frac_matrices_list[[as.character(year)]]
unique_lu_classes_year <- unique(sub('.*_', '', colnames(lu_matrix)))
unique_lu_classes_year
missing_lu_classes_indices <- which(!lu_classes %in% unique_lu_classes_year)
year_char <- as.character(year)
order_col_names <- paste0(year_char, "_", lu_classes)
if(length(missing_lu_classes_indices)>0){
missing_lu_classes <- lu_classes[missing_lu_classes_indices]
new_col_names <- paste0(year_char, "_", missing_lu_classes)
for(new_col_name in new_col_names){
cat("In year", year, "the following land use classes were missing:",
new_col_name, "\nAn empty column has been added\n")
warning("In year ", year, " the following land use classes were missing: ",
new_col_name, "\nAn empty column has been added\n")
lu_matrix <- lu_matrix %>%
as.data.frame() %>%
mutate(!!new_col_name := 0)
}
}
if(class(lu_matrix)[1]=="matrix"){
lu_matrix <- lu_matrix %>%
as.data.frame()
}
lu_matrix[is.na(lu_matrix)] <- 0
lu_matrix <- lu_matrix %>%
dplyr::select(all_of(order_col_names)) %>%
as.matrix()
order_col_names
colnames(lu_matrix)
names(lu_frac_matrices_list)
lu_frac_grids_list <- lapply(X = lu_raster_stack,
FUN = convert_cat_grid_into_fractional_grid)
names(lu_frac_grids_list) <- sort(years)
convert_map_into_fractional_lu_matrix <- function(years){
input_map_frac <- lu_frac_grids_list[[year]]
lu_frac_matrix <- matrix(data = terra::values(input_map_frac),
ncol = length(names(input_map_frac)))
lu_frac_matrix[is.na(lu_frac_matrix)] <- 0
if(no_unfilled_cells == T){
cat("\nRecaling all cells to ensure the fractions sum up to 1\n")
specify_output_dir(dir_output_files = dir_output_files,
aoi = country,
aggregation_factor = aggregation_factor)
filenames_cropped_lu_maps = intersect(list.files(pattern = "cropped_lu_map"),
list.files(pattern = ".tif$"))
if(!is.null(cut_off_year)){
cat("\nUsing the land use map for the year",
cut_off_year,
"as reference map\n")
filename_ind_ref_lu_map <- grep(as.character(cut_off_year),
filenames_cropped_lu_maps)
} else {
first_year <- sort(years)[1]
cat("\nUsing the land use map for the year ",
first_year,
"as reference map")
filename_ind_ref_lu_map <- grep(as.character(first_year),
filenames_cropped_lu_maps)
}
filename_ref_cropped_lu_map <-
filenames_cropped_lu_maps[filename_ind_ref_lu_map]
ref_cropped_lu_map <- terra::rast(filename_ref_cropped_lu_map)
if(terra::nlyr(ref_cropped_lu_map)>1){
ref_cropped_lu_map <- terra::app(ref_cropped_lu_map, fun = sum,
na.rm = T)
}
inds_NA_vals <- which(is.na(terra::values(ref_cropped_lu_map)))
if(length(inds_NA_vals)>0){
lu_frac_matrix = lu_frac_matrix[-inds_NA_vals,]
}
rowsums2 <- rowSums(lu_frac_matrix, na.rm = T)
lu_frac_matrix <- lu_frac_matrix %>%
as.data.frame() %>%
mutate_all(list(~./rowsums2)) %>%
as.matrix()
}
colnames(lu_frac_matrix) <- paste0(year, "_", names(input_maps_frac))
return(lu_frac_matrix)
}
lu_frac_matrices_list <- lapply(X = as.character(sort(years)),
FUN = convert_map_into_fractional_lu_matrix)
lu_classes <- identify_lu_classes(lu_frac_matrices_list = lu_frac_matrices_list)
lu_classes
names(lu_frac_matrices_list) <- sort(years)
add_missing_lu_classes <- function(year){
lu_matrix <- lu_frac_matrices_list[[as.character(year)]]
unique_lu_classes_year <- unique(sub('.*_', '', colnames(lu_matrix)))
missing_lu_classes_indices <- which(!lu_classes %in% unique_lu_classes_year)
year_char <- as.character(year)
order_col_names <- paste0(year_char, "_", lu_classes)
if(length(missing_lu_classes_indices)>0){
missing_lu_classes <- lu_classes[missing_lu_classes_indices]
new_col_names <- paste0(year_char, "_", missing_lu_classes)
for(new_col_name in new_col_names){
cat("In year", year, "the following land use classes were missing:",
new_col_name, "\nAn empty column has been added\n")
warning("In year ", year, " the following land use classes were missing: ",
new_col_name, "\nAn empty column has been added\n")
lu_matrix <- lu_matrix %>%
as.data.frame() %>%
mutate(!!new_col_name := 0)
}
}
if(class(lu_matrix)[1]=="matrix"){
lu_matrix <- lu_matrix %>%
as.data.frame()
}
lu_matrix[is.na(lu_matrix)] <- 0
lu_matrix <- lu_matrix %>%
dplyr::select(all_of(order_col_names)) %>%
as.matrix()
return(lu_matrix)
}
lu_frac_matrices_list2 <- lapply(X = sort(years),
FUN = add_missing_lu_classes)
colnames(lu_frac_matrices_list[[1]])
colnames(lu_frac_matrices_list[[2]])
rm(year)
names(lu_frac_grids_list)
convert_map_into_fractional_lu_matrix <- function(year){
input_map_frac <- lu_frac_grids_list[[year]]
lu_frac_matrix <- matrix(data = terra::values(input_map_frac),
ncol = length(names(input_map_frac)))
lu_frac_matrix[is.na(lu_frac_matrix)] <- 0
if(no_unfilled_cells == T){
cat("\nRecaling all cells to ensure the fractions sum up to 1\n")
specify_output_dir(dir_output_files = dir_output_files,
aoi = country,
aggregation_factor = aggregation_factor)
filenames_cropped_lu_maps = intersect(list.files(pattern = "cropped_lu_map"),
list.files(pattern = ".tif$"))
if(!is.null(cut_off_year)){
cat("\nUsing the land use map for the year",
cut_off_year,
"as reference map\n")
filename_ind_ref_lu_map <- grep(as.character(cut_off_year),
filenames_cropped_lu_maps)
} else {
first_year <- sort(years)[1]
cat("\nUsing the land use map for the year ",
first_year,
"as reference map")
filename_ind_ref_lu_map <- grep(as.character(first_year),
filenames_cropped_lu_maps)
}
filename_ref_cropped_lu_map <-
filenames_cropped_lu_maps[filename_ind_ref_lu_map]
ref_cropped_lu_map <- terra::rast(filename_ref_cropped_lu_map)
if(terra::nlyr(ref_cropped_lu_map)>1){
ref_cropped_lu_map <- terra::app(ref_cropped_lu_map, fun = sum,
na.rm = T)
}
inds_NA_vals <- which(is.na(terra::values(ref_cropped_lu_map)))
if(length(inds_NA_vals)>0){
lu_frac_matrix = lu_frac_matrix[-inds_NA_vals,]
}
rowsums2 <- rowSums(lu_frac_matrix, na.rm = T)
lu_frac_matrix <- lu_frac_matrix %>%
as.data.frame() %>%
mutate_all(list(~./rowsums2)) %>%
as.matrix()
}
colnames(lu_frac_matrix) <- paste0(year, "_", names(input_maps_frac))
return(lu_frac_matrix)
}
lu_frac_matrices_list <- lapply(X = as.character(sort(years)),
FUN = convert_map_into_fractional_lu_matrix)
colnames(lu_frac_matrices_list[[1]])
colnames(lu_frac_matrices_list[[2]])
colnames(lu_frac_matrices_list[[26]])
lu_classes <- identify_lu_classes(lu_frac_matrices_list = lu_frac_matrices_list)
names(lu_frac_matrices_list) <- sort(years)
add_missing_lu_classes <- function(year){
lu_matrix <- lu_frac_matrices_list[[as.character(year)]]
unique_lu_classes_year <- unique(sub('.*_', '', colnames(lu_matrix)))
missing_lu_classes_indices <- which(!lu_classes %in% unique_lu_classes_year)
year_char <- as.character(year)
order_col_names <- paste0(year_char, "_", lu_classes)
if(length(missing_lu_classes_indices)>0){
missing_lu_classes <- lu_classes[missing_lu_classes_indices]
new_col_names <- paste0(year_char, "_", missing_lu_classes)
for(new_col_name in new_col_names){
cat("In year", year, "the following land use classes were missing:",
new_col_name, "\nAn empty column has been added\n")
warning("In year ", year, " the following land use classes were missing: ",
new_col_name, "\nAn empty column has been added\n")
lu_matrix <- lu_matrix %>%
as.data.frame() %>%
mutate(!!new_col_name := 0)
}
}
if(class(lu_matrix)[1]=="matrix"){
lu_matrix <- lu_matrix %>%
as.data.frame()
}
lu_matrix[is.na(lu_matrix)] <- 0
lu_matrix <- lu_matrix %>%
dplyr::select(all_of(order_col_names)) %>%
as.matrix()
return(lu_matrix)
}
lu_frac_matrices_list2 <- lapply(X = sort(years),
FUN = add_missing_lu_classes)
colnames(lu_frac_matrices_list2[[1]])
colnames(lu_frac_matrices_list2[[10]])
summary(lu_frac_matrices_list2[[2]])
names(lu_frac_matrices_list2) <- sort(years)
lu_frac_matrices_list3 <- clean_lu_fact_matrices(matrices_list = lu_frac_matrices_list2,
cut_off_year = cut_off_year)
period <- paste0(c(as.character(first(sort(years))),
"-",
as.character(last(sort(years)))), collapse = "")
filename_lu_frac_matrices <- paste0("lu_frac_matrix_matrices_",
aggregation_factor,
"_",
period,
".Rds")
cat("\nWriting the fractional land use matrices here:\n",
getwd(), "\n")
saveRDS(lu_frac_matrices_list3, filename_lu_frac_matrices)
rm(list=ls())
