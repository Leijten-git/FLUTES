"Minimum number of pixels:", min_n_pixels3,
"Average fraction:", mean_populated_area)
warning("There are not enough non-empty pixels to estimate a model with",
"predictor variables for land use class: ", lu_class, ".\n",
"Instead, a linear intercept-only model has been estimated.",
"Note that this results in a r-squared of 0.\n",
"Consider changing the minimum threshold values. \n\nCurrent settings:\n",
"Minimum number of pixels:", min_n_pixels3,
"Average fraction:", mean_populated_area)
warning("There are not enough non-empty pixels to estimate a model with",
"predictor variables for land use class: ", lu_class, ".\n",
"Instead, a linear intercept-only model has been estimated.",
"Note that this results in a r-squared of 0.\n",
"Consider changing the minimum threshold values.",
"\n\nCurrent settings:\n",
"Minimum number of pixels:", min_n_pixels3, "\n",
"Average fraction:", mean_populated_area)
warning("There are not enough non-empty pixels to estimate a model with",
"predictor variables for land use class: ", lu_class, ".\n",
"Instead, a linear intercept-only model has been estimated.",
"Note that this results in a r-squared of 0.\n",
"Consider changing the minimum threshold values.",
"\n\nCurrent settings:\n",
"Minimum number of pixels: ", min_n_pixels3, "\n",
"Average fraction: ", mean_populated_area)
suppressWarnings(model_result <- plm::plm(model_spec,
index=c("id"),
data = panel_data_filter,
model = "within"))
r2 <- summary(model_result)$r.squared
r2
r2 <- summary(model_result)$r.squared
r2
class(r2)
r2 <- summary(model_result)$r.squared[1]
r2
r2 <- as.numeric(summary(model_result)$r.squared[1])
r2
data.frame(lu_class = lu_class,
r2 = r2)
data.frame(lu_class = NA,
r2 = NA)
saveRDS(data.frame(lu_class = NA,
r2 = NA),
"r2_scores.Rds")
r2_scores <- readRDS("r2_scores.Rds")
r2_scores
r2_scores <- readRDS("r2_scores.Rds") %>%
rbind(data.frame(lu_class = lu_class,
r2 = r2))
r2_scores
r2_scores <- readRDS("r2_scores.Rds") %>%
rbind(data.frame(lu_class = lu_class,
r2 = r2)) %>%
na.omit()
r2_scores
eadRDS("r2_scores.Rds") %>%
rbind(data.frame(lu_class = lu_class,
r2 = r2)) %>%
na.omit() %>%
saveRDS("r2_scores.Rds")
readRDS("r2_scores.Rds") %>%
rbind(data.frame(lu_class = lu_class,
r2 = r2)) %>%
na.omit() %>%
saveRDS("r2_scores.Rds")
readRDS("r2_scores.Rds") %>%
rbind(data.frame(lu_class = lu_class,
r2 = r2)) %>%
na.omit()
source("~/.active-rstudio-document", echo=TRUE)
warnings()
rm(list=ls())
q()
base_directory <- "C:/Users/Leijten/Food and Agriculture Organization/Scognamillo, Antonio (ESA) - Floris Leijten/Software"
package_name <- "FLUTES"
file_path_pkg <- paste0(base_directory, "/", package_name)
load_all(path = file_path_pkg)
# document(pkg = file_path_pkg)
# check(pkg = file_path_pkg)
# install(pkg = file_path_pkg)
#?run_FLUTES
dir_lu_filenames <- "C:/Users/Leijten/OneDrive - Food and Agriculture Organization/CLUMondo_package/validation/ESA-CCI_land_cover_maps"
setwd(dir_lu_filenames)
file_names <- list.files()[grepl("LCCS", list.files())]
paths_lu_filenames <- paste0(getwd(), "/", file_names)
years <- as.numeric(stringr::str_sub(sub('.*P1Y', '', paths_lu_filenames), 2, 5))
path_FAO <- "C:/Users/Leijten/OneDrive - Food and Agriculture Organization"
base_dir <- paste0(path_FAO, "/FLUTES_demo/new_model_results3")
path_ESA_map <- paste0(path_FAO, "/CLUMondo_package/validation/ESA-CCI_land_cover_maps")
path_lu_legend_filename <- file.path(path_ESA_map,
"aggregated",
"ESACCI_legend.csv")
extract_country_names()
country_name = "Nepal"
.country = country_name
.years = years
.paths_lu_filenames = paths_lu_filenames
.dir_output_files = base_dir
.aggregation_factor = 32
.path_lu_legend_filename = path_lu_legend_filename
.cut_off_year = 1998
.lags = c(1)
.growth_constraint = 5
.vals_lu_classes_to_exclude = 210
.is_abs_dev = F
.kernel_size = 25
crop_data_to_country(country = .country,
years = .years,
paths_lu_filenames = .paths_lu_filenames,
dir_output_files = .dir_output_files)
lu_frac_matrices_list <- gen_fract_lu_matrices(country = .country,
years = .years,
aggregation_factor = .aggregation_factor,
dir_output_files = .dir_output_files,
path_lu_legend_filename = .path_lu_legend_filename,
vals_lu_classes_to_exclude = .vals_lu_classes_to_exclude)
mask <- gen_gridded_mask(country = .country,
years = .years,
paths_lu_filenames = .paths_lu_filenames,
dir_output_files = .dir_output_files)
specify_output_dir(dir_output_files = .dir_output_files,
aoi = noquote(.country),
aggregation_factor = .aggregation_factor)
lu_requirements <- extract_lu_requirements(lu_frac_matrices_list = lu_frac_matrices_list,
years = .years)
extract_indices_cols <- function(lu){
indices_cols <- c(1:ncol(lu))
return(indices_cols)
}
indices_cols <- lapply(X = lu_frac_matrices_list, FUN = extract_indices_cols)
neighbourhood_output_matrices_list <- lapply(X = c(1:length(lu_frac_matrices_list)),
FUN = calc_neighbourhood_vals,
lu_list = lu_frac_matrices_list,
neigh_cols_list = indices_cols,
kernel_size = .kernel_size,
mask = mask,
suffix = "neigh")
saveRDS(neighbourhood_output_matrices_list, "neighbourhood_output_matrices_list.Rds")
neighbourhood_output_matrices_df <- do.call(cbind, neighbourhood_output_matrices_list)
lu_frac_matrices_long <- gen_panel_dataframe(years = .years,
lu_matrices = lu_frac_matrices_list,
aggregation_factor = .aggregation_factor,
dir_output_files = .dir_output_files,
country = .country)
fitted_vals_scaled <- regression_analysis(lu_matrices = lu_frac_matrices_long,
neigh_values = neighbourhood_output_matrices_df,
lu_classes = identify_lu_classes(lu_frac_matrices_list = lu_frac_matrices_list),
cut_off_year = .cut_off_year,
lags = .lags)
} else if(skip_preprocessing == T){
dir_model_output <- specify_output_dir(dir_output_files = .dir_output_files,
aoi = .country,
aggregation_factor = .aggregation_factor,
create_sub_folder = T,
are_conv_pars_perc = !.is_abs_dev,
growth_par = .growth_constraint,
are_PAs_excluded = F)
dir_model_output
new_matrix <- lu_allocation(lu = lu_frac_matrices_list[[index]],
sm = fitted_vals_scaled,
params = params,
dmd = lu_requirements_filter,
ln = neighbourhood_output_matrices_list[[index]],
constraint = T,
rescale = T,
PA = F,
output_dir = noquote(dir_model_output))
dir_model_output <- specify_output_dir(dir_output_files = .dir_output_files,
aoi = .country,
aggregation_factor = .aggregation_factor,
create_sub_folder = T,
are_conv_pars_perc = !.is_abs_dev,
growth_par = .growth_constraint,
are_PAs_excluded = F)
index = which(as.numeric(names(lu_frac_matrices_list))==(.cut_off_year+1))
inds_lu_requirements_rows <- c(index,nrow(lu_requirements))
inds_lu_requirements_cols <- c(2:(ncol(lu_requirements)-1))
lu_requirements_filter <- lu_requirements[inds_lu_requirements_rows,
inds_lu_requirements_cols]
max_devs <- determine_max_dev_pars(lu_requirements = lu_requirements_filter,
lu_first_period = lu_frac_matrices_list[[index]],
default_dev_par = .max_dev)
.max_dev = 1
specify_output_dir(dir_output_files = .dir_output_files,
aoi = noquote(.country),
aggregation_factor = .aggregation_factor)
period <- paste0(c(as.character(first(sort(years))),
"-",
as.character(last(sort(years)))), collapse = "")
filename_lu_frac_matrices <- paste0("lu_frac_matrix_matrices_",
.aggregation_factor,
"_",
period,
".Rds")
lu_frac_matrices_list <- readRDS(filename_lu_frac_matrices)
neighbourhood_output_matrices_list <-
readRDS("neighbourhood_output_matrices_list.Rds")
lu_requirements <- readRDS("land_use_requirements.Rds")
fitted_vals_scaled <- readRDS("fitted_vals_scaled.Rds")
index = which(as.numeric(names(lu_frac_matrices_list))==(.cut_off_year+1))
inds_lu_requirements_rows <- c(index,nrow(lu_requirements))
inds_lu_requirements_cols <- c(2:(ncol(lu_requirements)-1))
lu_requirements_filter <- lu_requirements[inds_lu_requirements_rows,
inds_lu_requirements_cols]
max_devs <- determine_max_dev_pars(lu_requirements = lu_requirements_filter,
lu_first_period = lu_frac_matrices_list[[index]],
default_dev_par = .max_dev)
params = list(is_abs_dev = .is_abs_dev,
max_devs = max_devs,
max_iter = .max_iter,
growth = rep(.growth_constraint, ncol(lu_frac_matrices_list[[1]])),
no_change = NULL)
dir_model_output <- specify_output_dir(dir_output_files = .dir_output_files,
aoi = .country,
aggregation_factor = .aggregation_factor,
create_sub_folder = T,
are_conv_pars_perc = !.is_abs_dev,
growth_par = .growth_constraint,
are_PAs_excluded = F)
.max_iter = 2e3
params = list(is_abs_dev = .is_abs_dev,
max_devs = max_devs,
max_iter = .max_iter,
growth = rep(.growth_constraint, ncol(lu_frac_matrices_list[[1]])),
no_change = NULL)
dir_model_output <- specify_output_dir(dir_output_files = .dir_output_files,
aoi = .country,
aggregation_factor = .aggregation_factor,
create_sub_folder = T,
are_conv_pars_perc = !.is_abs_dev,
growth_par = .growth_constraint,
are_PAs_excluded = F)
new_matrix <- lu_allocation(lu = lu_frac_matrices_list[[index]],
sm = fitted_vals_scaled,
params = params,
dmd = lu_requirements_filter,
ln = neighbourhood_output_matrices_list[[index]],
constraint = T,
rescale = T,
PA = F,
output_dir = noquote(dir_model_output))
cat("\nWriting the new matrix...\n")
saveRDS(new_matrix, "new_matrix.Rds")
calculate_rmse <- function(){
predicted_fractions <- c(new_matrix)
actual_fractions <- c(lu_frac_matrices_list[[as.character(last(sort(.years)))]])
original_fractions <- c(lu_frac_matrices_list[[index]])
nrow(lu_frac_matrices_list[[index]])
nrow(neighbourhood_output_matrices_list[[index]])
length(lu_frac_matrices_list[[index]])
length(as.matrix(neighbourhood_output_matrices_list[[index]]))
length(predicted_fractions)
length(actual_fractions)
length(original_fractions)
actual_changes <- abs(actual_fractions-original_fractions)
rmse_model <- sqrt(mean((actual_fractions - predicted_fractions)^2, na.rm = T))
rmse_no_change <- sqrt(mean((actual_fractions - original_fractions)^2, na.rm = T))
if(rmse_model>rmse_no_change){
cat("\nThe RMSE of the default model is higher than the RMSE of the NULL model!\n\n")
warning("\nThe RMSE of the default model is higher than the RMSE of the NULL model!\n\n")
} else {
cat("\nHurray! Outperforming the NULL model!\n\n")
warning("\nHurray! Outperforming the NULL model!\n\n")
}
RMSEs <- data.frame(model = c("default", "null"),
rmse = c(rmse_model, rmse_no_change))
return(RMSEs)
}
RMSEs <- calculate_rmse()
dim(fitted_vals_scaled)
colnames(fitted_vals_scaled)
grid_name = lu_classes[1]
grid_name = land_use_classes[1]
grid_name = "Grassland"
cat("\nNow calculating the lambda scores for grid:", grid_name, "\n")
fitted_vals_scaled[,grid_name]
lu_frac_matrices_list
names(lu_frac_matrices_list)
lu_frac_matrices_list[[index]]
names(lu_frac_matrices_list[[index]])
colnames(lu_frac_matrices_list[[index]])
grid_name
years[index]
index
years
sort(years)[index]
grid_name
lu_class = grid_name
cat("\nNow calculating the lambda scores for grid:", lu_class, "\n")
colname <- paste0(sort(years)[index], "_", lu_class)
colname
original_fractions <- c(lu_frac_matrices_list[[index]][,colname])
length(original_fractions)
length(predicted_fractions)
predicted_fractions <- fitted_vals_scaled[,lu_class]
length(predicted_fractions)
colname_lu_class <- paste0(sort(years)[index], "_", lu_class)
colname_lu_class
colname_lu_class_orig_year <- paste0(sort(years)[index], "_", lu_class)
colname_lu_class_orig_year
original_fractions <- c(lu_frac_matrices_list[[index]][,colname])
predicted_fractions <- fitted_vals_scaled[,lu_class]
calculate_lambda <- function(fractions){
n_cells <- length(fractions)
scaled_suitability <- fractions*suitability_grid
lambda <- sum(values(scaled_suitability), na.rm = T)/n_cells
return(lambda)
}
original_lambda <- calculate_lambda(fractions = original_fractions)
calculate_lambda <- function(fractions){
n_cells <- length(fractions)
scaled_suitability <- fractions*predicted_fractions
lambda <- sum(values(scaled_suitability), na.rm = T)/n_cells
return(lambda)
}
original_lambda <- calculate_lambda(fractions = original_fractions)
calculate_lambda <- function(fractions){
n_cells <- length(fractions)
scaled_suitability <- fractions*predicted_fractions
lambda <- sum(scaled_suitability, na.rm = T)/n_cells
return(lambda)
}
original_lambda <- calculate_lambda(fractions = original_fractions)
original_lambda
predicted_lambda <- calculate_lambda(input_grid = predicted_fractions)
original_lambda <- calculate_lambda(fractions = original_fractions)
predicted_lambda <- calculate_lambda(fractions = predicted_fractions)
predicted_lambda
lambda_scores <- data.frame(land_system = lu_class,
original_lambda = original_lambda,
predicted_lambda = predicted_lambda)
lambda_scores
identify_lu_classes(lu_frac_matrices_list = lu_frac_matrices_list)
lu_classes = identify_lu_classes(lu_frac_matrices_list = lu_frac_matrices_list)
calc_and_write_lambda_scores <- function(lu_class){
cat("\nNow calculating the lambda scores for land use class:", lu_class, "\n")
colname_lu_class_orig_year <- paste0(sort(years)[index], "_", lu_class)
original_fractions <- c(lu_frac_matrices_list[[index]][,colname])
predicted_fractions <- fitted_vals_scaled[,lu_class]
calculate_lambda <- function(fractions){
n_cells <- length(fractions)
scaled_suitability <- fractions*predicted_fractions
lambda <- sum(scaled_suitability, na.rm = T)/n_cells
return(lambda)
}
original_lambda <- calculate_lambda(fractions = original_fractions)
predicted_lambda <- calculate_lambda(fractions = predicted_fractions)
lambda_scores <- data.frame(land_system = lu_class,
original_lambda = original_lambda,
predicted_lambda = predicted_lambda)
}
lambda_scores_list <- lapply(X = lu_classes,
FUN = calc_and_write_lambda_scores)
lambda_scores_df <- do.call(rbind.data.frame, lambda_scores_list)
View(lambda_scores_df)
options(scipen=999)
View(lambda_scores_df)
!is.na(terra::values(mask))
sum(!is.na(terra::values(mask)))
plot(mask)
terra::values(mask)
summary(terra::values(mask))
gen_suit_maps <- function(lu_class){
predicted_fractions <- fitted_vals_scaled[,lu_class]
inds_mask <- which(!is.na(terra::values(mask)))
terra::values(mask)[inds_mask] <- predicted_fractions
terra::writeRaster(mask, paste0("suit_", lu_class, ".tif"))
}
gen_suit_maps <- function(lu_class){
cat("\nNow generating a suitability map for land use class:", lu_class, "\n")
predicted_fractions <- fitted_vals_scaled[,lu_class]
inds_mask <- which(!is.na(terra::values(mask)))
terra::values(mask)[inds_mask] <- predicted_fractions
terra::writeRaster(mask, paste0("suit_", lu_class, ".tif"))
}
sapply(X = lu_classes, FUN = lu_classes)
lu_classes
sapply(X = lu_classes, FUN = gen_suit_maps)
lu_class = lu_classes[5]
cat("\nNow generating a suitability map for land use class:", lu_class, "\n")
predicted_fractions <- fitted_vals_scaled[,lu_class]
inds_mask <- which(!is.na(terra::values(mask)))
terra::values(mask)[inds_mask] <- predicted_fractions
terra::writeRaster(mask, paste0("suit_", lu_class, ".tif"))
mask
paste0("suit_", lu_class, ".tif")
make.names(lu_class)
make.names(lu_class)
sub(".", "_", make.names(lu_class))
make.names(lu_class)
sub(".", "", make.names(lu_class))
ssub(".", "", make.names(lu_class))
gsub(".", "", make.names(lu_class))
gsub("\\.", "", make.names(lu_class), perl=TRUE)
make.names(lu_class)
gsub("\\..", "", make.names(lu_class), perl=TRUE)
gsub("\\...", "", make.names(lu_class), perl=TRUE)
make.names(lu_class)
gsub("...", "", make.names(lu_class), perl=TRUE)
gsub("...", "", make.names(lu_class), fixed = TRUE)
gsub("....................", "", make.names(lu_class), fixed = TRUE)
gsub(".....", "", make.names(lu_class), fixed = TRUE)
gsub("....", "", make.names(lu_class), fixed = TRUE)
lu_class_name <- gsub(".....", "", make.names(lu_class), fixed = TRUE)
lu_class_name
lu_class_name <- gsub("....", "", lu_class_name, fixed = TRUE)
lu_class_name
lu_class_name <- gsub("...", "", lu_class_name, fixed = TRUE)
u_class_name
lu_class_name <- gsub(".....", "_", make.names(lu_class), fixed = TRUE)
lu_class_name <- gsub("....", "_", lu_class_name, fixed = TRUE)
lu_class_name <- gsub("...", "_", lu_class_name, fixed = TRUE)
lu_class_name <- gsub("..", "_", lu_class_name, fixed = TRUE)
lu_class_name
lu_class_name <- gsub(".", "_", lu_class_name, fixed = TRUE)
lu_class_name
lu_class_filename <- paste0("Suit_", lu_class_name, ".tif")
lu_class_filename
lu_class_filename <- gsub("_.", ".", lu_class_filename, fixed = TRUE)
lu_class_filename
specify_output_dir(dir_output_files = .dir_output_files,
aoi = noquote(.country),
aggregation_factor = .aggregation_factor)
gen_suit_maps <- function(lu_class){
cat("\nNow generating a suitability map for land use class:", lu_class, "\n")
predicted_fractions <- fitted_vals_scaled[,lu_class]
inds_mask <- which(!is.na(terra::values(mask)))
terra::values(mask)[inds_mask] <- predicted_fractions
lu_class_name <- gsub(".....", "_", make.names(lu_class), fixed = TRUE)
lu_class_name <- gsub("....", "_", lu_class_name, fixed = TRUE)
lu_class_name <- gsub("...", "_", lu_class_name, fixed = TRUE)
lu_class_name <- gsub("..", "_", lu_class_name, fixed = TRUE)
lu_class_name <- gsub(".", "_", lu_class_name, fixed = TRUE)
lu_class_filename <- paste0("Suit_", lu_class_name, ".tif")
lu_class_filename <- gsub("_.", ".", lu_class_filename, fixed = TRUE)
specify_output_dir(dir_output_files = .dir_output_files,
aoi = noquote(.country),
aggregation_factor = .aggregation_factor)
terra::writeRaster(mask, paste0("suit_", lu_class, ".tif"))
}
specify_output_dir(dir_output_files = .dir_output_files,
aoi = noquote(.country),
aggregation_factor = .aggregation_factor)
dir.create("suit_maps", showWarnings = F)
setwd(paste0(getwd(), "/suit_maps"))
gen_suit_maps <- function(lu_class){
cat("\nNow generating a suitability map for land use class:", lu_class, "\n")
predicted_fractions <- fitted_vals_scaled[,lu_class]
inds_mask <- which(!is.na(terra::values(mask)))
terra::values(mask)[inds_mask] <- predicted_fractions
lu_class_name <- gsub(".....", "_", make.names(lu_class), fixed = TRUE)
lu_class_name <- gsub("....", "_", lu_class_name, fixed = TRUE)
lu_class_name <- gsub("...", "_", lu_class_name, fixed = TRUE)
lu_class_name <- gsub("..", "_", lu_class_name, fixed = TRUE)
lu_class_name <- gsub(".", "_", lu_class_name, fixed = TRUE)
lu_class_filename <- paste0("Suit_", lu_class_name, ".tif")
lu_class_filename <- gsub("_.", ".", lu_class_filename, fixed = TRUE)
specify_output_dir(dir_output_files = .dir_output_files,
aoi = noquote(.country),
aggregation_factor = .aggregation_factor)
dir.create("suit_maps", showWarnings = F)
setwd(paste0(getwd(), "/suit_maps"))
terra::writeRaster(mask, paste0("suit_", lu_class, ".tif"))
}
sapply(X = lu_classes, FUN = gen_suit_maps)
lu_class
cat("\nNow generating a suitability map for land use class:", lu_class, "\n")
predicted_fractions <- fitted_vals_scaled[,lu_class]
inds_mask <- which(!is.na(terra::values(mask)))
terra::values(mask)[inds_mask] <- predicted_fractions
lu_class_name <- gsub(".....", "_", make.names(lu_class), fixed = TRUE)
lu_class_name <- gsub("....", "_", lu_class_name, fixed = TRUE)
lu_class_name <- gsub("...", "_", lu_class_name, fixed = TRUE)
lu_class_name <- gsub("..", "_", lu_class_name, fixed = TRUE)
lu_class_name <- gsub(".", "_", lu_class_name, fixed = TRUE)
lu_class_filename <- paste0("Suit_", lu_class_name, ".tif")
lu_class_filename <- gsub("_.", ".", lu_class_filename, fixed = TRUE)
lu_class_filename
?substr
substr(lu_class_filename, 1, 10)
substr(lu_class_filename, 1, 15)
substr(lu_class_filename, 1, 20)
substr(lu_class_filename, 1, 25)
lu_class_filename_short <- substr(lu_class_filename, 1, 35)
lu_class_filename_short
gen_suit_maps <- function(lu_class){
cat("\nNow generating a suitability map for land use class:", lu_class, "\n")
predicted_fractions <- fitted_vals_scaled[,lu_class]
inds_mask <- which(!is.na(terra::values(mask)))
terra::values(mask)[inds_mask] <- predicted_fractions
lu_class_name <- gsub(".....", "_", make.names(lu_class), fixed = TRUE)
lu_class_name <- gsub("....", "_", lu_class_name, fixed = TRUE)
lu_class_name <- gsub("...", "_", lu_class_name, fixed = TRUE)
lu_class_name <- gsub("..", "_", lu_class_name, fixed = TRUE)
lu_class_name <- gsub(".", "_", lu_class_name, fixed = TRUE)
lu_class_filename <- paste0("Suit_", lu_class_name, ".tif")
lu_class_filename <- gsub("_.", ".", lu_class_filename, fixed = TRUE)
#lu_class_filename_short <- substr(lu_class_filename, 1, 35)
specify_output_dir(dir_output_files = .dir_output_files,
aoi = noquote(.country),
aggregation_factor = .aggregation_factor)
dir.create("suit_maps", showWarnings = F)
setwd(paste0(getwd(), "/suit_maps"))
terra::writeRaster(mask, paste0("suit_", lu_class_filename, ".tif"))
}
sapply(X = lu_classes, FUN = gen_suit_maps)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
warnings()
rm(list=ls())
q()
