rm(list=ls())
q()
base_directory <- "C:/Users/Leijten/Food and Agriculture Organization/Scognamillo, Antonio (ESA) - Floris Leijten/Software"
package_name <- "FLUTES"
file_path_pkg <- paste0(base_directory, "/", package_name)
load_all(path = file_path_pkg)
# document(pkg = file_path_pkg)
# check(pkg = file_path_pkg)
# install(pkg = file_path_pkg)
#?run_FLUTES
dir_lu_filenames <- "C:/Users/Leijten/OneDrive - Food and Agriculture Organization/CLUMondo_package/validation/ESA-CCI_land_cover_maps"
setwd(dir_lu_filenames)
file_names <- list.files()[grepl("LCCS", list.files())]
paths_lu_filenames <- paste0(getwd(), "/", file_names)
years <- as.numeric(stringr::str_sub(sub('.*P1Y', '', paths_lu_filenames), 2, 5))
path_FAO <- "C:/Users/Leijten/OneDrive - Food and Agriculture Organization"
base_dir <- paste0(path_FAO, "/FLUTES_demo/new_model_results3")
path_ESA_map <- paste0(path_FAO, "/CLUMondo_package/validation/ESA-CCI_land_cover_maps")
path_lu_legend_filename <- file.path(path_ESA_map,
"aggregated",
"ESACCI_legend.csv")
.country = "Burkina Faso"
.years = years
.paths_lu_filenames = paths_lu_filenames
.dir_output_files = base_dir
.aggregation_factor = 32
.path_lu_legend_filename = path_lu_legend_filename
.cut_off_year = 1998
.lags = c(1)
.growth_constraint = 5
.vals_lu_classes_to_exclude = 210
crop_data_to_country(country = .country,
years = .years,
paths_lu_filenames = .paths_lu_filenames,
dir_output_files = .dir_output_files)
lu_frac_matrices_list <- gen_fract_lu_matrices(country = .country,
years = .years,
aggregation_factor = .aggregation_factor,
dir_output_files = .dir_output_files,
path_lu_legend_filename = .path_lu_legend_filename,
vals_lu_classes_to_exclude = .vals_lu_classes_to_exclude)
mask <- gen_gridded_mask(country = .country,
paths_lu_filenames = .paths_lu_filenames,
dir_output_files = .dir_output_files)
inds_outside_mask <- which(is.na(terra::values(mask)))
discard_empty_pixels <- function(index){
lu_frac_matrices_df <- lu_frac_matrices_list[[index]]
lu_frac_matrices_df = lu_frac_matrices_df[-inds_outside_mask,]
return(lu_frac_matrices_df)
}
lu_frac_matrices_filtered_list <- lapply(X = c(1:length(lu_frac_matrices_list)),
FUN = discard_empty_pixels)
rm(lu_frac_matrices_list)
names(lu_frac_matrices_filtered_list) <- sort(.years)
specify_output_dir(dir_output_files = .dir_output_files,
aoi = noquote(.country),
aggregation_factor = .aggregation_factor)
lu_requirements <- extract_lu_requirements(lu_frac_matrices_list = lu_frac_matrices_filtered_list,
years = .years)
extract_indices_cols <- function(lu){
indices_cols <- c(1:ncol(lu))
return(indices_cols)
}
indices_cols <- lapply(X = lu_frac_matrices_filtered_list, FUN = extract_indices_cols)
neighbourhood_output_matrices_list <- lapply(X = c(1:length(lu_frac_matrices_filtered_list)),
FUN = calc_neighbourhood_vals,
lu_list = lu_frac_matrices_filtered_list,
neigh_cols_list = indices_cols,
kernel_size = .kernel_size,
mask = mask,
suffix = "neigh")
source("~/.active-rstudio-document", echo=TRUE)
.country = "Burkina Faso"
crop_data_to_country(country = .country,
years = .years,
paths_lu_filenames = .paths_lu_filenames,
dir_output_files = .dir_output_files)
lu_frac_matrices_list <- gen_fract_lu_matrices(country = .country,
years = .years,
aggregation_factor = .aggregation_factor,
dir_output_files = .dir_output_files,
path_lu_legend_filename = .path_lu_legend_filename,
vals_lu_classes_to_exclude = .vals_lu_classes_to_exclude)
rm(list=ls())
base_directory <- "C:/Users/Leijten/Food and Agriculture Organization/Scognamillo, Antonio (ESA) - Floris Leijten/Software"
package_name <- "FLUTES"
file_path_pkg <- paste0(base_directory, "/", package_name)
load_all(path = file_path_pkg)
# document(pkg = file_path_pkg)
# check(pkg = file_path_pkg)
# install(pkg = file_path_pkg)
#?run_FLUTES
dir_lu_filenames <- "C:/Users/Leijten/OneDrive - Food and Agriculture Organization/CLUMondo_package/validation/ESA-CCI_land_cover_maps"
setwd(dir_lu_filenames)
file_names <- list.files()[grepl("LCCS", list.files())]
paths_lu_filenames <- paste0(getwd(), "/", file_names)
years <- as.numeric(stringr::str_sub(sub('.*P1Y', '', paths_lu_filenames), 2, 5))
path_FAO <- "C:/Users/Leijten/OneDrive - Food and Agriculture Organization"
base_dir <- paste0(path_FAO, "/FLUTES_demo/new_model_results3")
path_ESA_map <- paste0(path_FAO, "/CLUMondo_package/validation/ESA-CCI_land_cover_maps")
path_lu_legend_filename <- file.path(path_ESA_map,
"aggregated",
"ESACCI_legend.csv")
.country = "Burkina Faso"
.years = years
.paths_lu_filenames = paths_lu_filenames
.dir_output_files = base_dir
.aggregation_factor = 32
.path_lu_legend_filename = path_lu_legend_filename
.cut_off_year = 1998
.lags = c(1)
.growth_constraint = 5
.vals_lu_classes_to_exclude = 210
.kernel_size = 25
crop_data_to_country(country = .country,
years = .years,
paths_lu_filenames = .paths_lu_filenames,
dir_output_files = .dir_output_files)
source("~/.active-rstudio-document", echo=TRUE)
rm(list=ls())
q()
source("~/.active-rstudio-document", echo=TRUE)
rm(list=ls())
q()
source("~/.active-rstudio-document", echo=TRUE)
base_directory <- "C:/Users/Leijten/Food and Agriculture Organization/Scognamillo, Antonio (ESA) - Floris Leijten/Software"
package_name <- "FLUTES"
file_path_pkg <- paste0(base_directory, "/", package_name)
load_all(path = file_path_pkg)
# document(pkg = file_path_pkg)
# check(pkg = file_path_pkg)
# install(pkg = file_path_pkg)
#?run_FLUTES
dir_lu_filenames <- "C:/Users/Leijten/OneDrive - Food and Agriculture Organization/CLUMondo_package/validation/ESA-CCI_land_cover_maps"
setwd(dir_lu_filenames)
file_names <- list.files()[grepl("LCCS", list.files())]
paths_lu_filenames <- paste0(getwd(), "/", file_names)
years <- as.numeric(stringr::str_sub(sub('.*P1Y', '', paths_lu_filenames), 2, 5))
path_FAO <- "C:/Users/Leijten/OneDrive - Food and Agriculture Organization"
base_dir <- paste0(path_FAO, "/FLUTES_demo/new_model_results3")
path_ESA_map <- paste0(path_FAO, "/CLUMondo_package/validation/ESA-CCI_land_cover_maps")
path_lu_legend_filename <- file.path(path_
"aggregated",
source("~/.active-rstudio-document", echo=TRUE)
skip_preprocessing = T
specify_output_dir(dir_output_files = .dir_output_files,
aoi = noquote(.country),
aggregation_factor = .aggregation_factor)
.dir_output_files = base_dir
specify_output_dir(dir_output_files = .dir_output_files,
aoi = noquote(.country),
aggregation_factor = .aggregation_factor)
.country = "Belgium"
specify_output_dir(dir_output_files = .dir_output_files,
aoi = noquote(.country),
aggregation_factor = .aggregation_factor)
.aggregation_factor = 32
specify_output_dir(dir_output_files = .dir_output_files,
aoi = noquote(.country),
aggregation_factor = .aggregation_factor)
specify_output_dir(dir_output_files = .dir_output_files,
aoi = noquote(.country),
aggregation_factor = .aggregation_factor)
period <- paste0(c(as.character(first(sort(years))),
"-",
as.character(last(sort(years)))), collapse = "")
filename_lu_frac_matrices <- paste0("lu_frac_matrix_matrices_",
aggregation_factor,
"_",
period,
".Rds")
filename_lu_frac_matrices <- paste0("lu_frac_matrix_matrices_",
.aggregation_factor,
"_",
period,
".Rds")
filename_lu_frac_matrices
lu_frac_matrices_list <- readRDS(filename_lu_frac_matrices)
saveRDS(neighbourhood_output_matrices_list, "neighbourhood_output_matrices_list.Rds")
rm(list=ls())
q()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
rm(list=ls())
q()
matrix <- matrix(c(1:9), byrow = T)
matrix
matrix <- matrix(c(1:9), byrow = T, nrow = 3)
matrix
matrix2 <- matrix(c(1:3), byrow = T, nrow = 3)
matrix2
matrix2 <- matrix(rep(c(1:3), 3), byrow = T, nrow = 3)
matrix2
matrix1/matrix2
matrix1 <- matrix(c(1:9), byrow = T, nrow = 3)
matrix2 <- matrix(rep(c(1:3), 3), byrow = T, nrow = 3)
matrix1/matrix2
source("~/.active-rstudio-document", echo=TRUE)
?solve
matrix2_inv <- solve(matrix2)
matrix2_inv
matrix2
matrix2_inv <- inv(matrix2)
?inv
source("~/.active-rstudio-document", echo=TRUE)
library(matlib)
install.packages("matlib")
matrix2_inv <- matlib::inv(matrix2)
matrix2
5/3
5*(1/3)
?diag
diag(1/c(1:9))
rm(list=ls())
q()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
extract_country_names()
rm(list=ls())
base_directory <- "C:/Users/Leijten/Food and Agriculture Organization/Scognamillo, Antonio (ESA) - Floris Leijten/Software"
package_name <- "FLUTES"
file_path_pkg <- paste0(base_directory, "/", package_name)
load_all(path = file_path_pkg)
# document(pkg = file_path_pkg)
# check(pkg = file_path_pkg)
# install(pkg = file_path_pkg)
#?run_FLUTES
dir_lu_filenames <- "C:/Users/Leijten/OneDrive - Food and Agriculture Organization/CLUMondo_package/validation/ESA-CCI_land_cover_maps"
setwd(dir_lu_filenames)
file_names <- list.files()[grepl("LCCS", list.files())]
paths_lu_filenames <- paste0(getwd(), "/", file_names)
years <- as.numeric(stringr::str_sub(sub('.*P1Y', '', paths_lu_filenames), 2, 5))
path_FAO <- "C:/Users/Leijten/OneDrive - Food and Agriculture Organization"
base_dir <- paste0(path_FAO, "/FLUTES_demo/new_model_results3")
path_ESA_map <- paste0(path_FAO, "/CLUMondo_package/validation/ESA-CCI_land_cover_maps")
path_lu_legend_filename <- file.path(path_ESA_map,
"aggregated",
"ESACCI_legend.csv")
extract_country_names()
country_name = "Nicaragua"
.country = country_name
.years = years
.paths_lu_filenames = paths_lu_filenames
.dir_output_files = base_dir
.aggregation_factor = 32
.path_lu_legend_filename = path_lu_legend_filename
.cut_off_year = 1998
.lags = c(1)
.growth_constraint = 5
.vals_lu_classes_to_exclude = 210
.is_abs_dev = F
cat("\nPreprocessing steps are skipped...")
warning("Preprocessing steps are skipped...")
crop_data_to_country(country = .country,
years = .years,
paths_lu_filenames = .paths_lu_filenames,
dir_output_files = .dir_output_files)
lu_frac_matrices_list <- gen_fract_lu_matrices(country = .country,
years = .years,
aggregation_factor = .aggregation_factor,
dir_output_files = .dir_output_files,
path_lu_legend_filename = .path_lu_legend_filename,
vals_lu_classes_to_exclude = .vals_lu_classes_to_exclude)
mask <- gen_gridded_mask(country = .country,
years = .years,
paths_lu_filenames = .paths_lu_filenames,
dir_output_files = .dir_output_files)
dim(lu_frac_matrices_list[[1]])
dim(lu_frac_matrices_list[[29]])
sum(!is.na(terra::values(mask)))
specify_output_dir(dir_output_files = .dir_output_files,
aoi = noquote(.country),
aggregation_factor = .aggregation_factor)
lu_requirements <- extract_lu_requirements(lu_frac_matrices_list = lu_frac_matrices_list,
years = .years)
extract_indices_cols <- function(lu){
indices_cols <- c(1:ncol(lu))
return(indices_cols)
}
indices_cols <- lapply(X = lu_frac_matrices_list, FUN = extract_indices_cols)
neighbourhood_output_matrices_list <- lapply(X = c(1:length(lu_frac_matrices_list)),
FUN = calc_neighbourhood_vals,
lu_list = lu_frac_matrices_list,
neigh_cols_list = indices_cols,
kernel_size = .kernel_size,
mask = mask,
suffix = "neigh")
.kernel_size = 25
neighbourhood_output_matrices_list <- lapply(X = c(1:length(lu_frac_matrices_list)),
FUN = calc_neighbourhood_vals,
lu_list = lu_frac_matrices_list,
neigh_cols_list = indices_cols,
kernel_size = .kernel_size,
mask = mask,
suffix = "neigh")
saveRDS(neighbourhood_output_matrices_list, "neighbourhood_output_matrices_list.Rds")
neighbourhood_output_matrices_df <- do.call(cbind, neighbourhood_output_matrices_list)
years = .years
lu_matrices = lu_frac_matrices_list
aggregation_factor = .aggregation_factor
dir_output_files = .dir_output_files
country = .country
lu_frac_matrices_long <- gen_panel_dataframe(years = .years,
lu_matrices = lu_frac_matrices_list,
aggregation_factor = .aggregation_factor,
dir_output_files = .dir_output_files,
country = .country)
lu_matrices = lu_frac_matrices_long
neigh_values = neighbourhood_output_matrices_df
lu_classes = identify_lu_classes(lu_frac_matrices_list = lu_frac_matrices_list)
cut_off_year = .cut_off_year
lags = .lags
min_n_pixels1 = 7e2
min_n_pixels2 = 4e2
min_n_pixels3 = 5e1
min_area1 = 5e2
min_area2 = 2.5e2
min_area3 = 10
cut_off_val_var = 5e-7
cat("\nGenerating a panel data frame...\n")
neigh_values_long <- neigh_values %>%
as.data.frame() %>%
mutate(id = row_number()) %>%
tidyr::gather(key = "year_and_land_class", value = "value_neigh", -id)
panel_data <- lu_matrices %>%
cbind(neigh_values_long %>%
dplyr::select(value_neigh))
panel_data2 <- panel_data %>%
tidyr::separate(col = "year_and_land_class",
into = c("Year", "Land class"),
sep = "_") %>%
mutate(Year = as.numeric(Year))
is.null(cut_off_year)
panel_data2 <- panel_data2 %>%
filter(Year <= cut_off_year)
panel_data3 <- panel_data2 %>%
rename(fraction_lu = "value",
fraction_lu_neigh = "value_neigh") %>%
arrange(id, `Land class`)
if(!is.null(lags)){
for(lag_pos in lags){
cat('\nCreating a lagged variable with position:', lag_pos, "\n")
lag_col_name <- paste0("lag_fraction_lu_", lag_pos)
panel_data3 <- panel_data3 %>%
group_by(id, `Land class`) %>%
mutate(!!rlang::ensym(lag_col_name) := dplyr::lag(fraction_lu,
n = lag_pos,
default = NA)) %>%
ungroup() %>%
na.omit()
}
}
cat("Starting the regression analysis.\n",
"The model specification depends on the number of non-emtpy pixels.\n",
"Current cut-off values:\n",
"Cut-off value 1:", min_n_pixels1, "\n",
"Cut-off value 2:", min_n_pixels2, "\n",
"Maximum variance:", cut_off_val_var, "\n")
lu_classes
lu_class = lu_classes[1]
panel_data_filter <- panel_data3  %>%
filter(`Land class` == lu_class) %>%
dplyr::select(-`Land class`)
n_pixels <- length(unique(panel_data_filter$id))
mean_populated_area <- panel_data_filter %>%
group_by(id) %>%
summarize(mean_fraction = mean(fraction_lu, na.rm = T)) %>%
ungroup() %>%
summarize(sum = sum(mean_fraction)) %>%
pull()
total_n_pop_pixels <- panel_data_filter %>%
group_by(id) %>%
summarize(sum = mean(fraction_lu, na.rm = T)) %>%
ungroup() %>%
filter(sum>0) %>%
nrow()
var_dep_var <- var(panel_data_filter$fraction_lu)
vars <- colnames(panel_data_filter)
lagged_vars <- vars[grep("lag_fraction_lu", vars)]
cat("\nNow performing a regression analysis for land use class:",
lu_class,
"\n",
"Number of non-empty pixels:", total_n_pop_pixels, "\n",
"Time-averaged populated area:", mean_populated_area, "\n",
"Variance:", var_dep_var, "\n")
model_spec <- stats::formula(paste("fraction_lu", "~",
paste("fraction_lu_neigh + ",
paste(lagged_vars, collapse = "+"))))
total_n_pop_pixels>min_n_pixels1 &
mean_populated_area > min_area1 &
var_dep_var >= cut_off_val_var
total_n_pop_pixels<=min_n_pixels1 &
total_n_pop_pixels>min_n_pixels2 &
mean_populated_area <= min_area1 &
mean_populated_area > min_area2 &
var_dep_var >= cut_off_val_var
length(lagged_vars)>0 &
total_n_pop_pixels>min_n_pixels3 &
mean_populated_area>min_area3
first_lagged_var <- lagged_vars[1]
xsym <- rlang::ensym(first_lagged_var)
model_result <- rlang::inject(stats::lm(fraction_lu ~ !!xsym,
data = panel_data_filter))
model_result
summary(model_result)
summary(model_result)$r.squared
r2 <- summary(model_result)$r.squared
r2
model_result <- stats::lm(fraction_lu ~ 1, data = panel_data_filter)
r2 <- summary(model_result)$r.squared
r2
model_result <- stats::lm(fraction_lu ~ 1, data = panel_data_filter)
model_result
summary(model_result)
r2 <- summary(model_result)$r.squared
r2
warning("Not enough filled pixels for land use class:", lu_class)
warning("Not enough filled pixels for land use class: ", lu_class,
"to include predictor variables as regressors.\n",
"Instead, a linear intercept-only model has been estimated.",
"Note that this results in a r-squared of 0")
warning("There are not enough non-empty pixels to estimate a model with",
"predictor variables for land use class:", lu_class)
warning("There are not enough non-empty pixels to estimate a model with",
"predictor variables for land use class: ", lu_class, ".\n",
"Instead, a linear intercept-only model has been estimated.",
"Note that this results in a r-squared of 0.\n",
"Consider changing the minimum threshold values. Current settings:\n",
"Minimum number of pixels:", min_n_pixels3,
"Average fraction:", mean_populated_area)
warning("There are not enough non-empty pixels to estimate a model with",
"predictor variables for land use class: ", lu_class, ".\n",
"Instead, a linear intercept-only model has been estimated.",
"Note that this results in a r-squared of 0.\n",
"Consider changing the minimum threshold values. \nCurrent settings:\n",
"Minimum number of pixels:", min_n_pixels3,
"Average fraction:", mean_populated_area)
warning("There are not enough non-empty pixels to estimate a model with",
"predictor variables for land use class: ", lu_class, ".\n",
"Instead, a linear intercept-only model has been estimated.",
"Note that this results in a r-squared of 0.\n",
"Consider changing the minimum threshold values. \n\nCurrent settings:\n",
"Minimum number of pixels:", min_n_pixels3,
"Average fraction:", mean_populated_area)
warning("There are not enough non-empty pixels to estimate a model with",
"predictor variables for land use class: ", lu_class, ".\n",
"Instead, a linear intercept-only model has been estimated.",
"Note that this results in a r-squared of 0.\n",
"Consider changing the minimum threshold values.",
"\n\nCurrent settings:\n",
"Minimum number of pixels:", min_n_pixels3, "\n",
"Average fraction:", mean_populated_area)
warning("There are not enough non-empty pixels to estimate a model with",
"predictor variables for land use class: ", lu_class, ".\n",
"Instead, a linear intercept-only model has been estimated.",
"Note that this results in a r-squared of 0.\n",
"Consider changing the minimum threshold values.",
"\n\nCurrent settings:\n",
"Minimum number of pixels: ", min_n_pixels3, "\n",
"Average fraction: ", mean_populated_area)
suppressWarnings(model_result <- plm::plm(model_spec,
index=c("id"),
data = panel_data_filter,
model = "within"))
r2 <- summary(model_result)$r.squared
r2
r2 <- summary(model_result)$r.squared
r2
class(r2)
r2 <- summary(model_result)$r.squared[1]
r2
r2 <- as.numeric(summary(model_result)$r.squared[1])
r2
data.frame(lu_class = lu_class,
r2 = r2)
data.frame(lu_class = NA,
r2 = NA)
saveRDS(data.frame(lu_class = NA,
r2 = NA),
"r2_scores.Rds")
r2_scores <- readRDS("r2_scores.Rds")
r2_scores
r2_scores <- readRDS("r2_scores.Rds") %>%
rbind(data.frame(lu_class = lu_class,
r2 = r2))
r2_scores
r2_scores <- readRDS("r2_scores.Rds") %>%
rbind(data.frame(lu_class = lu_class,
r2 = r2)) %>%
na.omit()
r2_scores
eadRDS("r2_scores.Rds") %>%
rbind(data.frame(lu_class = lu_class,
r2 = r2)) %>%
na.omit() %>%
saveRDS("r2_scores.Rds")
readRDS("r2_scores.Rds") %>%
rbind(data.frame(lu_class = lu_class,
r2 = r2)) %>%
na.omit() %>%
saveRDS("r2_scores.Rds")
readRDS("r2_scores.Rds") %>%
rbind(data.frame(lu_class = lu_class,
r2 = r2)) %>%
na.omit()
source("~/.active-rstudio-document", echo=TRUE)
warnings()
rm(list=ls())
q()
