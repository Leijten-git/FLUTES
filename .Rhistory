total_n_pop_pixels <- sum(panel_data_filter$fraction_lu>0)
cat("\nNow performing a regression analysis for land use class:",
lu_class,
"\n",
"Number of non-empty pixels:", total_n_pop_pixels, "\n",
"Total area:", total_area, "\n")
vars <- colnames(panel_data_filter)
lagged_vars <- vars[grep("lag_fraction_lu", vars)]
model_spec <- stats::formula(paste("fraction_lu", "~",
paste("fraction_lu_neigh + ",
paste(lagged_vars, collapse = "+"))))
if(total_n_pop_pixels>cut_off_val_reg1){
suppressWarnings(model_result <- plm::plm(model_spec,
index=c("id", "Year"),
data = panel_data_filter,
model = "within"))
} else if(total_n_pop_pixels<=cut_off_val_reg1 & total_n_pop_pixels>cut_off_val_reg2){
suppressWarnings(model_result <- plm::plm(model_spec,
index=c("id"),
data = panel_data_filter,
model = "within"))
} else {
vars <- colnames(panel_data_filter)
lagged_vars <- vars[grep("lag_fraction_lu", vars)]
if(length(lagged_vars)>0){
first_lagged_var <- lagged_vars[1]
xsym <- rlang::ensym(first_lagged_var)
model_result <- rlang::inject(stats::lm(fraction_lu ~ !!xsym,
data = panel_data_filter))
} else {
model_result <- lm(fraction_lu ~ 1, data = panel_data_filter)
}
}
fitted_vals = model_result %>%
stats::predict()
normalize <- function(x, na.rm = TRUE) {
return((x- min(x)) /(max(x)-min(x)))
}
fitted_vals_scaled <- normalize(as.numeric(fitted_vals))
return(fitted_vals_scaled)
}
fitted_vals_scaled_list <- lapply(X = lu_classes, FUN = gen_preds_by_lu_class)
class(fitted_vals_scaled_list)
fitted_vals_scaled_list2 <- sapply(X = lu_classes, FUN = gen_preds_by_lu_class)
View(fitted_vals_scaled_list)
View(fitted_vals_scaled_list2)
summary(fitted_vals_scaled_list)
summary(fitted_vals_scaled_list2)
load_all(path = file_path_pkg)
load_all(path = file_path_pkg)
rm(list=ls())
q()
use_package("rlang")
#use_package("plm")
#use_package("rlang")
use_package("stats")
load_all(path = file_path_pkg)
base_directory <- "C:/Users/Leijten/Food and Agriculture Organization/Scognamillo, Antonio (ESA) - Floris Leijten/Software"
package_name <- "FLUTES"
file_path_pkg <- paste0(base_directory, "/", package_name)
#setwd(file_path_pkg)
dir_lu_filenames <- "C:/Users/Leijten/OneDrive - Food and Agriculture Organization/CLUMondo_package/validation/ESA-CCI_land_cover_maps"
setwd(dir_lu_filenames)
file_names <- list.files()[grepl("LCCS", list.files())]
paths_lu_filenames <- paste0(getwd(), "/", file_names)
years <- as.numeric(stringr::str_sub(sub('.*P1Y', '', paths_lu_filenames), 2, 5))
base_dir <- "C:/Users/Leijten/OneDrive - Food and Agriculture Organization/FLUTES_demo/new_model_results3"
#load_all(path = file_path_pkg)
path_FAO <- "C:/Users/Leijten/OneDrive - Food and Agriculture Organization"
path_ESA_map <- paste0(path_FAO, "/CLUMondo_package/validation/ESA-CCI_land_cover_maps")
setwd(file.path(path_ESA_map, "aggregated"))
#ESACCI_legend <- read.csv("ESACCI_legend.csv")
path_lu_legend_filename <- file.path(path_ESA_map,
"aggregated",
"ESACCI_legend.csv")
library(FLUTES)
load_all(path = file_path_pkg)
check(pkg = file_path_pkg)
#use_package("plm")
#use_package("rlang")
#use_package("stats")
use_package("dplyr")
#use_package("plm")
#use_package("rlang")
#use_package("stats")
use_package("dplyr")
check(pkg = file_path_pkg)
?regression_analysis
install(pkg = file_path_pkg)
rm(list=ls())
q()
source("~/.active-rstudio-document", echo=TRUE)
specify_output_dir
load_all(path = file_path_pkg)
source("~/.active-rstudio-document", echo=TRUE)
load_all(path = file_path_pkg)
regression_analysis()
load_all(path = file_path_pkg)
regression_analysis(lu_classes = lu_classes)
5e1
lu_class
lu_classes = lu_classes
neigh_values = neighbourhood_output_matrices_df
lags = c(1)
cut_off_val_reg1 = 2e2
cut_off_val_reg2 = 5e1
cat("\nGenerating a panel data frame...\n")
lu_frac_matrices_long <- gen_panel_dataframe(years = years,
aggregation_factor = 16)
neigh_values_long <- neigh_values %>%
as.data.frame() %>%
mutate(id = row_number()) %>%
tidyr::gather(key = "year_and_land_class", value = "value_neigh", -id)
panel_data <- lu_frac_matrices_long %>%
cbind(neigh_values_long %>%
dplyr::select(value_neigh))
panel_data2 <- panel_data %>%
tidyr::separate(col = "year_and_land_class",
into = c("Year", "Land class"),
sep = "_")
panel_data3 <- panel_data2 %>%
rename(fraction_lu = "value",
fraction_lu_neigh = "value_neigh") %>%
arrange(id, `Land class`)
if(!is.null(lags)){
for(lag_pos in lags){
cat('\nCreating a lagged variable with position:', lag_pos, "\n")
lag_col_name <- paste0("lag_fraction_lu_", lag_pos)
panel_data3 <- panel_data3 %>%
group_by(id, `Land class`) %>%
mutate(!!rlang::ensym(lag_col_name) := dplyr::lag(fraction_lu,
n = lag_pos,
default = NA)) %>%
ungroup() %>%
na.omit()
}
}
lu_class = lu_classes[7]
panel_data_filter <- panel_data3  %>%
filter(`Land class` == lu_class) %>%
dplyr::select(-`Land class`)
total_area = sum(panel_data_filter$fraction_lu)
total_n_pop_pixels <- sum(panel_data_filter$fraction_lu>0)
cat("\nNow performing a regression analysis for land use class:",
lu_class,
"\n",
"Number of non-empty pixels:", total_n_pop_pixels, "\n",
"Total area:", total_area, "\n")
?var
var(panel_data_filter)
options(scipen=999)
var(panel_data_filter)
var(panel_data_filter$fraction_lu)
var(panel_data_filter$fraction_lu_neigh)
var(panel_data_filter$lag_fraction_lu_1)
model_spec <- stats::formula(paste("fraction_lu", "~",
paste("fraction_lu_neigh + ",
paste(lagged_vars, collapse = "+"))))
vars <- colnames(panel_data_filter)
lagged_vars <- vars[grep("lag_fraction_lu", vars)]
var(panel_data_filter)
var(panel_data_filter$fraction_lu)
var(panel_data_filter$fraction_lu_neigh)
var(panel_data_filter$lag_fraction_lu_1)
model_spec <- stats::formula(paste("fraction_lu", "~",
paste("fraction_lu_neigh + ",
paste(lagged_vars, collapse = "+"))))
if(total_n_pop_pixels>cut_off_val_reg1){
suppressWarnings(model_result <- plm::plm(model_spec,
index=c("id", "Year"),
data = panel_data_filter,
model = "within"))
} else if(total_n_pop_pixels<=cut_off_val_reg1 & total_n_pop_pixels>cut_off_val_reg2){
suppressWarnings(model_result <- plm::plm(model_spec,
index=c("id"),
data = panel_data_filter,
model = "within"))
} else {
vars <- colnames(panel_data_filter)
lagged_vars <- vars[grep("lag_fraction_lu", vars)]
if(length(lagged_vars)>0){
first_lagged_var <- lagged_vars[1]
xsym <- rlang::ensym(first_lagged_var)
model_result <- rlang::inject(stats::lm(fraction_lu ~ !!xsym,
data = panel_data_filter))
} else {
model_result <- lm(fraction_lu ~ 1, data = panel_data_filter)
}
}
total_n_pop_pixels<=cut_off_val_reg1
total_n_pop_pixels>cut_off_val_reg2
var(panel_data_filter$fraction_lu)
var(panel_data_filter$fraction_lu_neigh)
var(panel_data_filter$lag_fraction_lu_1)
var_dep_var <- var(panel_data_filter$fraction_lu)
var_dep_var
total_area = sum(panel_data_filter$fraction_lu)
total_n_pop_pixels <- sum(panel_data_filter$fraction_lu>0)
var_dep_var <- var(panel_data_filter$fraction_lu)
1
cut_off_val_var = 0.25
var_dep_var >= cut_off_val_var
total_n_pop_pixels<=cut_off_val_reg1 &
total_n_pop_pixels>cut_off_val_reg2 &
var_dep_var >= cut_off_val_var
load_all(path = file_path_pkg)
regression_analysis(lu_classes = lu_classes,
neigh_values = neighbourhood_output_matrices_df)
0.0006106441
re3
5e3
5-e3
0.00001
0.5e3
0.5e-3
5e-3
5e-4
5e-5
5e-6
6
5e-6
5e1
1e2
2.5e2
1e2
load_all(path = file_path_pkg)
fitted_vals_scaled <- regression_analysis(lu_classes = lu_classes,
neigh_values = neighbourhood_output_matrices_df)
rm(list=ls())
q()
source("~/.active-rstudio-document", echo=TRUE)
rm(list=ls9)
rm(list=ls())
q()
source("~/.active-rstudio-document", echo=TRUE)
rm(list=ls())
q()
source("~/.active-rstudio-document", echo=TRUE)
demand_FL
lu_frac_matrices_list
lu_frac_matrices_df <- land_use_matrices_cleaned %>%
do.call(rbind.data.frame, lu_frac_matrices_list)
lu_frac_matrices_df <- land_use_matrices_cleaned %>%
do.call(cbind.data.frame, lu_frac_matrices_list)
lu_frac_matrices_df <- lu_frac_matrices_list %>%
do.call(cbind.data.frame)
lu_frac_matrices_df <- do.call(cbind.data.frame, lu_frac_matrices_list)
land_use_requirements <- demand_FL(landuse = lu_frac_matrices_df, # matrix with data on all land systems and all years
path = paste0(getwd(), "/land_use_requirements.Rds"),
type = "sum", # don't see why we would ever use type = "mean"
ts = years,
k = n_land_systems)
#use_r("gen_panel_dataframe")
#use_r("calc_neighbourhood_vals")
#use_r("create_gridded_mask")
#use_r("specify_output_dir")
use_r("extract_lu_requirements")
rm(list=ls())
q()
#use_r("gen_panel_dataframe")
#use_r("calc_neighbourhood_vals")
#use_r("create_gridded_mask")
#use_r("specify_output_dir")
use_r("extract_lu_requirements")
base_directory <- "C:/Users/Leijten/Food and Agriculture Organization/Scognamillo, Antonio (ESA) - Floris Leijten/Software"
package_name <- "FLUTES"
file_path_pkg <- paste0(base_directory, "/", package_name)
#setwd(file_path_pkg)
dir_lu_filenames <- "C:/Users/Leijten/OneDrive - Food and Agriculture Organization/CLUMondo_package/validation/ESA-CCI_land_cover_maps"
setwd(dir_lu_filenames)
file_names <- list.files()[grepl("LCCS", list.files())]
paths_lu_filenames <- paste0(getwd(), "/", file_names)
years <- as.numeric(stringr::str_sub(sub('.*P1Y', '', paths_lu_filenames), 2, 5))
base_dir <- "C:/Users/Leijten/OneDrive - Food and Agriculture Organization/FLUTES_demo/new_model_results3"
load_all(path = file_path_pkg)
path_FAO <- "C:/Users/Leijten/OneDrive - Food and Agriculture Organization"
path_ESA_map <- paste0(path_FAO, "/CLUMondo_package/validation/ESA-CCI_land_cover_maps")
setwd(file.path(path_ESA_map, "aggregated"))
#ESACCI_legend <- read.csv("ESACCI_legend.csv")
path_lu_legend_filename <- file.path(path_ESA_map,
"aggregated",
"ESACCI_legend.csv")
library(FLUTES)
crop_data_to_country(country = "Burkina Faso",
years = years,
paths_lu_filenames = paths_lu_filenames,
dir_output_files = base_dir)
# library(desc)
# setwd(file_path_pkg)
# desc <- description$new()
# desc2 <- description$new("!new")
# desc2
# use_description()
# dependencies <- c("rnaturalearth", "rnaturalearthdata", "sf", "terra")
#
# for(dependency in dependencies){
#   use_package(dependency)
# }
#
#library(flutes)
#install(pkg = file_path_pkg) # after the minimum viable product is ready!
# ?extract_country_names
# ?extract_by_mask
# ?crop_data_to_country
#gen_fract_lu_matrices
lu_frac_matrices_list <- gen_fract_lu_matrices(country = "Burkina Faso",
years = years,
aggregation_factor = 16,
dir_output_files = base_dir,
path_lu_legend_filename = path_lu_legend_filename,
vals_lu_classes_to_exclude = 210) # water bodies
lu_classes <- identify_lu_classes(country = "Burkina Faso",
years = years,
aggregation_factor = 16,
dir_output_files = base_dir)
specify_output_dir(dir_output_files = base_dir,
aoi = "Burkina Faso",
aggregation_factor = 16)
lu_frac_matrices_df <- do.call(cbind.data.frame, lu_frac_matrices_list)
lu_classes
n_lu_classes <- length(lu_classes)
lu <- do.call(cbind.data.frame, lu_frac_matrices_list)
n_lu_classes <- length(lu_classes)
class_supply <- colSums(lu)
class_supply
years <- ts[1]:tail(ts,1)
years
sort(years)
years <- sort(years)[1]:tail(sort(years),1)
years
years_sorted <- sort(years)[1]:tail(sort(years),1)
years_sorted
demand <- matrix(NA, nrow = length(years_sorted), ncol = k + 2)
demand
years_sorted <- sort(years)[1]:tail(sort(years),1)
demand <- matrix(NA, nrow = length(years_sorted), ncol = k + 2)
demand <- matrix(NA, nrow = length(years_sorted), ncol = n_lu_classes + 2)
demand
demand[,1] <- years
demand
obs_ind <- which(demand[,1]%in%years)
obs_ind
obs_ind <- which(demand[,1] %in% years)
obs_ind
obs_ind <- which(demand[,1] %in% years)
obs_ind
period <- paste0(as.character(c(first(years), last(years))), collapse = ":")
period
path
path = paste0(getwd(), "/land_use_requirements.Rds")
lu <- do.call(cbind.data.frame, lu_frac_matrices_list)
n_lu_classes <- length(lu_classes)
class_supply <- colSums(lu)
years_sorted <- sort(years)[1]:tail(sort(years),1)
demand <- matrix(NA, nrow = length(years_sorted), ncol = n_lu_classes + 2)
demand[,1] <- years
obs_ind <- which(demand[,1] %in% years)
period <- paste0(as.character(c(first(years), last(years))), collapse = ":")
period
if(!is.null(path)){
cat("\nWriting the land use requiremenyears for the total simulation period (i.e.,", period, ") ",
"in the output working directory:\n", path, "\n", sep = "")
}
years
class_supply_year <- class_supply[grep(year, colnames(lu))]
year = years[11]
class_supply_year <- class_supply[grep(year, colnames(lu))]
class_supply_year
?class_supply
class_supply
class_supply_year
length(class_supply_year)
n_unique_land_systems
length(class_supply_year)
n_lu_classes
warning("Number of land systems varies across years. See:\n",
path, "\n")
length(class_supply_year)<n_lu_classes
names(class_supply_year)
names(class_supply_year)
lu <- do.call(cbind.data.frame, lu_frac_matrices_list)
colnames(lu)
colnames(lu_frac_matrices_list[[1]])
colnames(lu_frac_matrices_list[[20]])
colnames(lu_frac_matrices_list[[17]])
colnames(lu_frac_matrices_list[[27]])
colnames(lu_frac_matrices_list[[29]])
lu <- do.call(cbind.data.frame, lu_frac_matrices_list)
colnames(lu)
n_lu_classes <- length(lu_classes)
n_lu_classes
class_supply <- colSums(lu)
class_supply
lu
colnames(lu)
lu_frac_matrices_list[[2]]
colnames(lu_frac_matrices_list[[2]])
colnames(lu_frac_matrices_list[[29]])
lu <- do.call(rbind.data.frame, lu_frac_matrices_list)
n_lu_classes <- length(lu_classes)
n_lu_classes
class_supply <- colSums(lu)
class_supply
years_sorted <- sort(years)[1]:tail(sort(years),1)
demand <- matrix(NA, nrow = length(years_sorted), ncol = n_lu_classes + 2)
demand[,1] <- years
obs_ind <- which(demand[,1] %in% years)
period <- paste0(as.character(c(first(years), last(years))), collapse = ":")
if(!is.null(path)){
cat("\nWriting the land use requiremenyears for the total simulation period (i.e.,", period, ") ",
"in the output working directory:\n", path, "\n", sep = "")
}
year
class_supply_year <- class_supply[grep(year, colnames(lu))]
class_supply_year
paste0(year, "_", lu_classes)
class_supply_year_df
class_supply_year_df <- data.frame(lu_class = names(class_supply_year),
supply = as.numeric(class_supply_year))
class_supply_year_df
class_supply_year_df <- data.frame(lu_class = names(class_supply_year),
supply = as.numeric(class_supply_year))
class_supply_year_complete_df <- data.frame(lu_class = paste0(year, "_", lu_classes)) %>%
merge(class_supply_year_df,
by = "land_system",
all.x = T) %>%
mutate(supply = coalesce(supply, 0))
class_supply_year_complete_df <- data.frame(lu_class = paste0(year, "_", lu_classes)) %>%
merge(class_supply_year_df,
by = "lu_class",
all.x = T) %>%
mutate(supply = coalesce(supply, 0))
class_supply_year_complete_df
class_supply_year <- class_supply_year_complete_df$supply
class_supply_year
class_supply_year_complete_df$supply
class_supply_year_complete_df
colnames(lu)
names(lu_frac_matrices_list)
names(lu_frac_matrices_list) <- NULL
lu <- do.call(cbind.data.frame, lu_frac_matrices_list)
colnames(lu)
n_lu_classes <- length(lu_classes)
class_supply <- colSums(lu)
years_sorted <- sort(years)[1]:tail(sort(years),1)
demand <- matrix(NA, nrow = length(years_sorted), ncol = n_lu_classes + 2)
demand[,1] <- years
obs_ind <- which(demand[,1] %in% years)
period <- paste0(as.character(c(first(years), last(years))), collapse = ":")
if(!is.null(path)){
cat("\nWriting the land use requiremenyears for the total simulation period (i.e.,", period, ") ",
"in the output working directory:\n", path, "\n", sep = "")
}
demand[which(demand[,1]==year), 2:(k+1)]
demand[which(demand[,1]==year), 2:(n_lu_classes+1)]
?approx
load_all(path = file_path_pkg)
?extract_lu_requirements
lu_classes
extract_lu_requirements(lu_frac_matrices_list = lu_frac_matrices_list,
lu_classes = lu_classes,
years = years)
cut_off_year = NULL
gen_panel_dataframe
mask <- gen_gridded_mask(country = "Burkina Faso",
paths_lu_filenames = paths_lu_filenames,
dir_output_files = base_dir)
mask
plot(mask)
extract_indices_cols <- function(lu){
indices_cols <- c(1:ncol(lu))
return(indices_cols)
}
extract_indices_cols
indices_cols <- lapply(X = lu_frac_matrices_list, FUN = extract_indices_cols)
indices_cols
length(lu_frac_matrices_list)
gen_panel_dataframe
colnames(panel_data3)
lu_frac_matrices_long <- gen_panel_dataframe(years = years,
aggregation_factor = 16)
colnames(lu_frac_matrices_long)
neigh_values_long <- neigh_values %>%
as.data.frame() %>%
mutate(id = row_number()) %>%
tidyr::gather(key = "year_and_land_class", value = "value_neigh", -id)
panel_data <- lu_frac_matrices_long %>%
cbind(neigh_values_long %>%
dplyr::select(value_neigh))
panel_data2 <- panel_data %>%
tidyr::separate(col = "year_and_land_class",
into = c("Year", "Land class"),
sep = "_")
panel_data2 <- lu_frac_matrices_long %>%
tidyr::separate(col = "year_and_land_class",
into = c("Year", "Land class"),
sep = "_")
class(panel_data2 $Year)
panel_data2 <- panel_data2 %>%
mutate(Year = as.numeric(Year))
head(panel_data2 )
is.null(cut_off_year)
is.null(cut_off_year)
cut_off_year
is.null(cut_off_year)
rm(list=ls())
dev.off()
q()
source("~/.active-rstudio-document", echo=TRUE)
rm(list=ls9)
rm(list=ls())
q()
